lista$vector1
lista[c(1,3)]
##sinónimos
lista[[c(3,5)]]
lista[[3]][[5]]
lista[[3]][5]
lista$vector1[5]
##concordancia parcial
lista$d
lista[["d", exact=FALSE]]
lista[["d"]]
lista[["d", exact=FALSE]]
data2[1,3]
data2[1]
data2[1,]
data2[1,]
data2[2,]
data[2,]
data2[,3]
data[c(3,5,7), 1:3]
data[c(3,5,7), 1:3]
data2$Estatus_capacidad_UCI[3]
data1$Estatus_capacidad_UCI[3]
data1[data1$Estatus_capacidad_UCI =="buena",]
data1[data1$Estatus_capacidad_UCI =="BUENA",]
## Identificando los valores NA.
head(complete.cases(airquality))
head(is.na(airquality))
sum(complete.cases(airquality))
sum(is.na(airquality))
nrow(airquality)
is.na(airquality)
sum(is.na(airquality))
sum(!is.na(airquality))
## eliminando los valores NA de una tabla o matriz
head(airquality[complete.cases(airquality),],10)
#7 QUITANDO VALORES PERDIDOS
head(airquality[complete.cases(airquality),],10)
head(airquality,10)
#7 QUITANDO VALORES PERDIDOS
head(airquality[, complete.cases(airquality)],10)
#7 QUITANDO VALORES PERDIDOS
head(airquality[complete.cases(airquality),],10)
#7 QUITANDO VALORES PERDIDOS
head(airquality[!complete.cases(airquality),],10)
### !is.na sólo funciona con vectores
head(airquality$Solar.R[!is.na(airquality$Solar.R)])
### !is.na sólo funciona con vectores
head(airquality$Solar.R[is.na(airquality$Solar.R)])
## O bien con la función na.omit
head(na.omit(airquality))
head(na.omit(airquality),10)
x <- 10
if (x>10){
y <- 1+1
}else{
y <- 1+2
}
y
x <- 20
if (x>10){
y <- 1+1
}else{
y <- 1+2
}
y
if (x>10){y <- 1+1}else{ y <- 1+2}
y
x <- 3
if (x>10){y <- 1+1}else{ y <- 1+2}
y
x <- 10
o <- 40
if (o>10){
y <- 1+1
}else{
y <- 1+2
}
if (x>10){
y <- 1+1
}else{
y <- 1+2
}
x <- 10
x>10
x>10
x>=10
if (x=10){
x ==10
if (x>=10){
y <- 1+1
}else{
y <- 1+2
}
y
if (x<=10){
y <- 1+1
}
if (x<=10){
y <- 1+1
}
y
if (x<10){
y <- 1+1
}
y
x <- 11
if (x<10){
y <- 1+1
}
y <- 0
if (x<10){
y <- 1+1
}
for (i in 1:20) {
x[i] <- lista$matriz[i]
}
x
length(x)
lista$matriz
for (i in 1:20) {
x <- lista$matriz[i]
}
x
for (i in 1:20) {
x[i] <- lista$matriz[i]
}
x
remove(x)
for (i in 1:20) {
x[i] <- lista$matriz[i]
}
x <- vector("numeric", 20)
for (i in 1:20) {
x[i] <- lista$matriz[i]
}
x
x <- vector("numeric", 20)
for (i in 1:20) {
x[i] <- NA
}
x
x <- matrix(1:15, 5, 3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
x
seq_len(nrow(x))
seq_len(ncol(x))
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i,j])
}
}
x <- 5
while (x>3 & x<10 ) {
x <- x+.5
}
x
while (x>3 & x<10 ) {
x <- x-.5
}
x
while (x>3 & x<10 ) {
x <- x-.5
}
x
x <- 5
while (x>3 & x<10 ) {
x <- x-.5
}
x
x <- 5
while (x>3 & x<10 ) {
x <- x+.5
}
x
while (x>3) {
x <- x+.5
}
x
while (x>3 & x<10) {
x <- x+.5
}
x
mean <- mean(rnorm(30))
mean <- 6
mean <- 6
head(data)
head(data2)
head(data1)
head(data2)
data[2,]
data[c(3,5,7), 1:3]
data1[data1$Estatus_capacidad_UCI =="BUENA",]
#7 QUITANDO VALORES PERDIDOS
head(airquality[complete.cases(airquality),],10)
head(airquality,10)
head(na.omit(airquality),10)
vector("numeric", 20)
x <- vector("numeric", 20)
x <- vector("numeric", 20)
for (i in 1:20) {
x[i] <- NA
}
x
lista <- list(data=matrix(1:30, 6, 5), matriz=head(as.matrix(airquality), 20), vector1=rnorm(100))
head(lista)
head(lista, 10)
lista <- list(data=matrix(1:30, 6, 5), matriz=head(as.matrix(airquality), 20), vector1=rnorm(10))
head(lista,)
y <- 10
mapply(rep, 1:4, 4:1)
ruido <- function(n, mean, sd){
rnorm(n, mean, sd)
}
ruido(5,1,2)
ruido(1:5,1:5,2)
mapply(ruido, 1:5, 1:5)
mapply(ruido, 1:5, 1:5, 2)
as.list(airquality)
lapply(airquality, mean)
lapply(na.omit(airquality), mean)
lapply(as.list(na.omit(airquality)), mean)
lapply(as.list(na.omit(airquality)), mean, simplify=TRUE )
lapply(as.list(na.omit(airquality)), quantile, .5, .9 )
lapply(as.list(na.omit(airquality)), quantile, c(.5, .9) )
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 4:1, SIMPLIFY = TRUE)
mapply(rep, 1:4, 4:1, SIMPLIFY = TRUE)
mapply(rep, 1:4, 4:1, SIMPLIFY = FALSE)
mapply(rep, 1:4, 4:1)
## Respuestas
a <- data.frame(columna1 = 1:10,variable2 = c(rep(c("grupo1","grupo2"), each =5)))
a
## Respuestas
a <- data.frame(columna1 = 1:10,variable2 = rep(c("grupo1","grupo2"), each =5))
a
y <- c(rep(c("grupo1", "grupo2"), each = 5))
x <- data.frame(variable1 = 1:10,
variable2 = c(y))
x
data.frame(variable1=1:10, Variable2=1:10)
x=factor(x, labels = c("grupo1", "grupo2"))
data.frame(variable1=1:10, Variable2=1:10)
x <- data.frame(variable1=1:10, Variable2=1:10)
x=factor(x, labels = c("grupo1", "grupo2"))
x$Variable2=factor(x$Variable2, labels = c("grupo1", "grupo2"))
x$Variable2=factor(x$Variable2, labels = rep("grupo1", "grupo2", each=5))
x$Variable2=factor(x$Variable2, levels= c(1,2)labels = rep("grupo1", "grupo2", each=5))
x$Variable2=factor(x$Variable2, levels= c(1,2),labels = rep("grupo1", "grupo2", each=5))
x
x <- data.frame(variable1=1:10, Variable2=1:10)
x$Variable2=factor(x$Variable2, levels= c(1,2),labels = rep("grupo1", "grupo2", each=5))
x$Variable2=factor(x$Variable2,labels = rep("grupo1", "grupo2", each=5))
x <- data.frame(variable1=1:10, Variable2=1:10)
x$Variable2=factor(x$Variable2,labels = rep("grupo1", "grupo2", each=5))
##hospitalizados link 2
URL4 <- "https://datos.cdmx.gob.mx/dataset/b0d4230e-f37b-463e-8c16-3565aa78cbfc/resource/8b29f1ab-6245-42f1-878b-78e9a4b02374/download/personas_hospitalizadas_con_diagnostico_covid19-series_totales.csv"
download.file(URL4, destfile = "./data/covid19CDMXhospitalizados.csv")
hospitalizados <- read.csv("./data/covid19CDMXhospitalizados.csv")
hospitalizados <- hospitalizados[hospitalizados$aÃ.o==2020,]
names(hospitalizados)
#24
hospitalizados[150,7]
soyunafuncion <- function(x,y){
x+y
}
soyunafuncion(10000, 40000)
soyunafuncion <- function(x,y=10){
result <- x+y
print(result)
}
soyunafuncion(10)
soyunafuncion <- function(x,y=10){
result <- x+y
}
soyunafuncion(10)
soyunafuncion <- function(x,y=10){
result <- x+y
result
}
soyunafuncion(10)
formals(rnorm)
str(rnorm)
rnorm(70)
mean(rnorm(70))
rnorm(70, mean = 3, sd=6)
## por posición
set.seed(1)
rnorm(5, 3, 2)
##por nombre
set.seed(1)
rnorm(n=5, mean = 3, sd = 2)
rnorm(mean = 3, 5,2)
##No recomendado invertir el orden de los args.
set.seed(1)
rnorm(mean = 3, 5,2)
##equivalentes
str(lm)
rnorm(10, m = 4,  1)
set.seed(1)
rnorm(10, m = 4,  1)
f <- function(a, b){
a^2
}
f(2)
##Sin embargo
f <- function(a, b){
x <- a^2
y <- b^3
return(x, y)
}
f(2)
f(2,4)
##Sin embargo
f <- function(a, b){
x <- a^2
y <- b^3
return(x, y)
}
f(2,6)
##Sin embargo
f <- function(a, b){
x <- a^2
y <- b^3
print(x, y)
}
f(2,6)
##Sin embargo
f <- function(a, b){
x <- a^2
y <- b^3
c(x,y)
}
f(2,6)
f(2)
f(2,7)
fun <- function(x, y, ...){
plot(x,y, ...)
}
str(fun)
?plot
fun(40, 80, type = "l")
?kmeans
args(data.frame)
data.frame(x=1:10, y=4:14, v=5:15)
data.frame(x=1:11, y=4:14, v=5:15)
data.frame(x=1:11, y=4:14, v=5:15)
args(rbind)
args(paste)
paste("a", "b", "c", sep = ":")
paste("a", "b", "c", se = ":")
lm <- function(x){x+x}
library(rafalib)
sd(rnorm(1000))
sd <- sd(rnorm(1000))
f <- sd(rnorm(1000))
sd <- sd(rnorm(1000))
desviacion <- function(mean, otro){
y <- otro+mean
mean(y)
}
desviacion(4,5)
mean <- function(mean, otro){
y <- otro+mean
mean(y)
}
remove(mean())
remove(mean
remove(mean)
remove(mean)
makepower <- function(n){
pow <- function(x){
x^n
}
pow
}
cube <- makepower(3)
cube(2)
f <- function(x){ ##ambito léxico
y <- 2
y^2+g
}
g <- function(x){ ##ámbito dinámico
x*y
}
makepower(3)
cube(2)
square <- makepower(2)
square(4)
as.list(na.omit(airquality))
lapply(as.list(na.omit(airquality)), quantile)
srt(quantile)
str(quantile)
?quantile
lapply(as.list(na.omit(airquality)), quantile, probs=c(.5,.90))
quantile(airquality$Ozone, probs = c(.4,.2))
quantile(na.omit(airquality$Ozone), probs = c(.4,.2))
sapply(as.list(na.omit(airquality)), quantile, probs=c(.5,.90))
sapply(as.list(na.omit(airquality)), quantile, probs=c(.5,.90), simplify = FALSE)
sapply(as.list(na.omit(airquality)), quantile, probs=c(.5,.90))
data <- na.omit(airquality)
apply(data, 2, sd)
apply(data, 1, sd)
apply(data, c(1,2), sd)
apply(data,2, quantile)
rep(c(3,5), 8)
rep(c(3,5), each=8)
mapply(rep, 1:4, 4:1)
rep(1, each=4)
rep(2, each=3)
rep(3, each=2)
rep(4, each=1)
rep(1:4, each=4:1)
ruido <- function(n, mean, sd){
rnorm(n, mean, sd)
}
1:5
ruido(1:5,1:5,2)
mapply(ruido, 1:5, 1:5, 2)
tapply(data$Temp, factor(data$Month), mean)
split(data, factor(data$Month))
split(data$Ozone, factor(data$Month))
sapply(S, quantile)
S <- split(data$Ozone, factor(data$Month))
sapply(S, quantile)
split(as.matrix(data), factor(data$Month))
split(data$Wind, factor(data$Month))
S <- split(airquality, airquality$Month)
split(airquality, airquality$Month)
split(airquality, airquality$Month)
split(airquality, factor(airquality$Month))
factor(airquality$Month)
split(airquality, factor(airquality$Month, labels = c("mayo", "junio", "julio", "agosto", "septiembre", "octubre")))
split(airquality, factor(airquality$Month, labels = c("mayo", "junio", "julio", "agosto", "septiembre")))
x <- split(airquality, factor(airquality$Month, labels = c("mayo", "junio", "julio", "agosto", "septiembre")))
sapply(x, mean)
sapply(x, colMeans)
x <- split(data, factor(data$Month,
labels = c("mayo", "junio", "julio", "agosto", "septiembre")))
sapply(x, colMeans)
tapply(data$Temp, factor(data$Month), mean)
lapply(x, mean)
lapply(x, mean)
lapply(x, colMeans)
function (x, na.rm = FALSE, dims = 1L)
sapply(x, colMeans)
sapply(x, colMeans)
lapply(x, colMeans)
splitdata <- split(data, factor(data$Month,
labels = c("mayo", "junio", "julio", "agosto", "septiembre")))
names(data)
lapply(splitdata, function(x) colMeans(x[,c("Ozone", "Wind", "Temp")]))
splitdata[c("mayo", "junio", "julio")]
splitdata[c("mayo", "junio", "julio")]
lapply(splitdata[c("mayo", "junio", "julio")], function(x) colMeans(x[,c("Ozone", "Wind", "Temp")]))
##hospitalizados link 2
URL4 <- "https://datos.cdmx.gob.mx/dataset/b0d4230e-f37b-463e-8c16-3565aa78cbfc/resource/8b29f1ab-6245-42f1-878b-78e9a4b02374/download/personas_hospitalizadas_con_diagnostico_covid19-series_totales.csv"
##hospitalizados link 2
URL4 <- "https://datos.cdmx.gob.mx/dataset/b0d4230e-f37b-463e-8c16-3565aa78cbfc/resource/8b29f1ab-6245-42f1-878b-78e9a4b02374/download/personas_hospitalizadas_con_diagnostico_covid19-series_totales.csv"
download.file(URL4, destfile = "./data/covid19CDMXhospitalizados.csv")
hospitalizados <- read.csv("./data/covid19CDMXhospitalizados.csv")
hospitalizados <- hospitalizados[hospitalizados$aÃ.o==2020,]
#24
hospitalizados[150,7]
#25
mean(hospitalizados$hospitalizados_totales_cdmx)
#25
mean(hospitalizados[,"hospitalizados_totales_cdmx"])
#25
mean(hospitalizados$hospitalizados_totales_cdmx)
hospitalizados[hospitalizados$mes=="diciembre", "hospitalizados_totales_cdmx"]
#26
mean(hospitalizados[hospitalizados$mes=="diciembre", "hospitalizados_totales_cdmx"])
if (x >= 1){y <- 2+x} else{y<-2*x}
## estructuas basicas de control
#27
x <- 0
## estructuas basicas de control
#27
x <- 1
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
#28
x <- vector("numeric", 1000)
for (i in 1:1000) {
y <- rbinom(1,1,.5)
if (y >= 1){x[i] <- 2+y} else{x[i]<-2*y}
}
x
dimnames(airquality)
names(airquality)
colnames(airquality)
